#!/usr/bin/perl
use strict; use warnings; 
# TODO
# 
# 	[*] Each file has one more line than previous (add1)
#
# 	[] "Compound" effect where each new file prints contents
# 		of previous file and appends, so each file is exponentially
# 		larger (compound)
#
# 	[] Allow user to input desired number of files to create
#
# 	[] Set flag options so use can invoke command to do either add1
# 		or compound [ -a, --add ] and [ -c, --compound ]
# 	


# Create 4 files
# 	[] First file starts with one line
# 	[] Second with contents of first file + add line (1 + 1 = 2)
# 	[] Third file with contents of second file + add line (2 + 1 = 3)
# 	[] Fourth file with contents of third file + add line (3 + 1 = 4)
sub addOne
{
	for (my $i = 1; $i < 5; $i++)
	{ 
		my $new = undef; 
		my $filename = "$i.txt"; 
		my $encoding = ":encoding(UTF-8)"; 

		open ($new, ">> $encoding", $filename) 
			|| die "cannot open >> $encoding $i.txt: $!"; 

		print $new "It's over 9000!\n"; 

			if ($i > 1 && $i < 5)
			{
				my $prev = $i - 1;
				open (my $old, "< $encoding", "$prev.txt")
					|| die "cannot open < $encoding $prev.txt: $!"; 

				while (my $line = <$old>)
				{
					print $new "$line"; 
					shift; 
				}

				close $old;
			} 

		close $new; 
	} 
}


# Create initial file with one line(1)
# second line has 2x first file (2 * 1 = 2)
# third file  has 2x second file (2 * 2 = 4)
# fourth file has 2x third file (4 * 2 = 8)
sub compound
{ 
	for (my $i = 1; $i < 5; $i++)
	{ 
		my $new = undef; 
		my $filename = "$i.txt"; 
		my $encoding = ":encoding(UTF-8)"; 

		open ($new, ">> $encoding", $filename) 
			|| die "cannot open >> $encoding $i.txt: $!"; 

		print $new "It's over 9000!\n"; 

			if ($i > 1 && $i < 5)
			{
				my $prev = $i - 1;
				open (my $old, "< $encoding", "$prev.txt")
					|| die "cannot open < $encoding $prev.txt: $!"; 

				while (my $line = <$old>)
				{
					print $new "$line"; 
					shift; 
				}

				close $old;
			} 

		close $new; 
	} 
}



